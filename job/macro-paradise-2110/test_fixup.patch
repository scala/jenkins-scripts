From 2cc7ff19bbaaa381cd9006eafcbaa3e7da5c5f96 Mon Sep 17 00:00:00 2001
From: Eugene Burmako <xeno.by@gmail.com>
Date: Mon, 23 Sep 2013 16:39:39 +0200
Subject: [PATCH] tests that currently fail for macro paradise

---
 test/files/jvm/t7006.check              |   1 +
 test/files/neg/t6446-additional.check   |  60 +++++++---------
 test/files/neg/t6446-list.check         |   1 +
 test/files/neg/t6446-missing.check      |  57 +++++++--------
 test/files/neg/t6446-show-phases.check  |  57 +++++++--------
 test/files/neg/t6666.scala              | 121 --------------------------------
 test/files/neg/t7494-no-options.check   |  60 +++++++---------
 test/files/neg/t800.check               |   3 +-
 test/files/pos/t7426.scala              |   3 -
 test/files/run/t6102.check              |   7 +-
 test/files/run/t6259.scala              |  56 ---------------
 test/files/scalap/typeAnnotations.check |   2 +-
 12 files changed, 103 insertions(+), 325 deletions(-)
 delete mode 100644 test/files/neg/t6666.scala
 delete mode 100644 test/files/pos/t7426.scala
 delete mode 100644 test/files/run/t6259.scala

diff --git a/test/files/jvm/t7006.check b/test/files/jvm/t7006.check
index 7c99eba30c..65b3b46a19 100644
--- a/test/files/jvm/t7006.check
+++ b/test/files/jvm/t7006.check
@@ -1,4 +1,5 @@
 [running phase parser on Foo_1.scala]
+[running phase macroparadise on Foo_1.scala]
 [running phase namer on Foo_1.scala]
 [running phase packageobjects on Foo_1.scala]
 [running phase typer on Foo_1.scala]
diff --git a/test/files/neg/t6446-additional.check b/test/files/neg/t6446-additional.check
index 6dfe072913..f01aabd824 100755
--- a/test/files/neg/t6446-additional.check
+++ b/test/files/neg/t6446-additional.check
@@ -1,38 +1,28 @@
     phase name  id  description
     ----------  --  -----------
         parser   1  parse source into ASTs, perform simple desugaring
-         namer   2  resolve names, attach symbols to named trees
-packageobjects   3  load package objects
-         typer   4  the meat and potatoes: type the trees
-        patmat   5  translate match expressions
-superaccessors   6  add super accessors in traits and nested classes
-    extmethods   7  add extension methods for inline classes
-       pickler   8  serialize symbol tables
-     refchecks   9  reference/override checking, translate nested objects
-       uncurry  10  uncurry, translate function values to anonymous classes
-     tailcalls  11  replace tail calls by jumps
-    specialize  12  @specialized-driven class and method specialization
- explicitouter  13  this refs to outer pointers, translate patterns
-       erasure  14  erase types, add interfaces for traits
-   posterasure  15  clean up erased inline classes
-      lazyvals  16  allocate bitmaps, translate lazy vals into lazified defs
-    lambdalift  17  move nested functions to top level
-  constructors  18  move field definitions into constructors
-       flatten  19  eliminate inner classes
-         mixin  20  mixin composition
-       cleanup  21  platform-specific cleanups, generate reflective calls
-         icode  22  generate portable intermediate code
-#partest -optimise
-       inliner  23  optimization: do inlining
-inlinehandlers  24  optimization: inline exception handlers
-      closelim  25  optimization: eliminate uncalled closures
-      constopt  26  optimization: optimize null and other constants
-           dce  27  optimization: eliminate dead code
-           jvm  28  generate JVM bytecode
-       ploogin  29  A sample phase that does so many things it's kind of hard...
-      terminal  30  the last phase during a compilation run
-#partest !-optimise
-           jvm  23  generate JVM bytecode
-       ploogin  24  A sample phase that does so many things it's kind of hard...
-      terminal  25  the last phase during a compilation run
-#partest
+ macroparadise   2  let our powers combine
+         namer   3  resolve names, attach symbols to named trees in paradise
+packageobjects   4  load package objects in paradise
+         typer   5  the meat and potatoes: type the trees in paradise
+        patmat   6  translate match expressions
+superaccessors   7  add super accessors in traits and nested classes
+    extmethods   8  add extension methods for inline classes
+       pickler   9  serialize symbol tables
+     refchecks  10  reference/override checking, translate nested objects
+       uncurry  11  uncurry, translate function values to anonymous classes
+     tailcalls  12  replace tail calls by jumps
+    specialize  13  @specialized-driven class and method specialization
+ explicitouter  14  this refs to outer pointers, translate patterns
+       erasure  15  erase types, add interfaces for traits
+   posterasure  16  clean up erased inline classes
+      lazyvals  17  allocate bitmaps, translate lazy vals into lazified defs
+    lambdalift  18  move nested functions to top level
+  constructors  19  move field definitions into constructors
+       flatten  20  eliminate inner classes
+         mixin  21  mixin composition
+       cleanup  22  platform-specific cleanups, generate reflective calls
+         icode  23  generate portable intermediate code
+           jvm  24  generate JVM bytecode
+       ploogin  25  A sample phase that does so many things it's kind of hard...
+      terminal  26  the last phase during a compilation run
diff --git a/test/files/neg/t6446-list.check b/test/files/neg/t6446-list.check
index fa5c581941..3b08e6480a 100755
--- a/test/files/neg/t6446-list.check
+++ b/test/files/neg/t6446-list.check
@@ -1 +1,2 @@
+macroparadise - Empowers production Scala compiler with latest macro developments
 ploogin - A sample plugin for testing.
diff --git a/test/files/neg/t6446-missing.check b/test/files/neg/t6446-missing.check
index ba5e30dc05..7d63e5d234 100755
--- a/test/files/neg/t6446-missing.check
+++ b/test/files/neg/t6446-missing.check
@@ -2,36 +2,27 @@ Warning: class not found: t6446.Ploogin
     phase name  id  description
     ----------  --  -----------
         parser   1  parse source into ASTs, perform simple desugaring
-         namer   2  resolve names, attach symbols to named trees
-packageobjects   3  load package objects
-         typer   4  the meat and potatoes: type the trees
-        patmat   5  translate match expressions
-superaccessors   6  add super accessors in traits and nested classes
-    extmethods   7  add extension methods for inline classes
-       pickler   8  serialize symbol tables
-     refchecks   9  reference/override checking, translate nested objects
-       uncurry  10  uncurry, translate function values to anonymous classes
-     tailcalls  11  replace tail calls by jumps
-    specialize  12  @specialized-driven class and method specialization
- explicitouter  13  this refs to outer pointers, translate patterns
-       erasure  14  erase types, add interfaces for traits
-   posterasure  15  clean up erased inline classes
-      lazyvals  16  allocate bitmaps, translate lazy vals into lazified defs
-    lambdalift  17  move nested functions to top level
-  constructors  18  move field definitions into constructors
-       flatten  19  eliminate inner classes
-         mixin  20  mixin composition
-       cleanup  21  platform-specific cleanups, generate reflective calls
-         icode  22  generate portable intermediate code
-#partest !-optimise
-           jvm  23  generate JVM bytecode
-      terminal  24  the last phase during a compilation run
-#partest -optimise
-       inliner  23  optimization: do inlining
-inlinehandlers  24  optimization: inline exception handlers
-      closelim  25  optimization: eliminate uncalled closures
-      constopt  26  optimization: optimize null and other constants
-           dce  27  optimization: eliminate dead code
-           jvm  28  generate JVM bytecode
-      terminal  29  the last phase during a compilation run
-#partest
+ macroparadise   2  let our powers combine
+         namer   3  resolve names, attach symbols to named trees in paradise
+packageobjects   4  load package objects in paradise
+         typer   5  the meat and potatoes: type the trees in paradise
+        patmat   6  translate match expressions
+superaccessors   7  add super accessors in traits and nested classes
+    extmethods   8  add extension methods for inline classes
+       pickler   9  serialize symbol tables
+     refchecks  10  reference/override checking, translate nested objects
+       uncurry  11  uncurry, translate function values to anonymous classes
+     tailcalls  12  replace tail calls by jumps
+    specialize  13  @specialized-driven class and method specialization
+ explicitouter  14  this refs to outer pointers, translate patterns
+       erasure  15  erase types, add interfaces for traits
+   posterasure  16  clean up erased inline classes
+      lazyvals  17  allocate bitmaps, translate lazy vals into lazified defs
+    lambdalift  18  move nested functions to top level
+  constructors  19  move field definitions into constructors
+       flatten  20  eliminate inner classes
+         mixin  21  mixin composition
+       cleanup  22  platform-specific cleanups, generate reflective calls
+         icode  23  generate portable intermediate code
+           jvm  24  generate JVM bytecode
+      terminal  25  the last phase during a compilation run
diff --git a/test/files/neg/t6446-show-phases.check b/test/files/neg/t6446-show-phases.check
index 10a9e08b86..fe41c548ce 100644
--- a/test/files/neg/t6446-show-phases.check
+++ b/test/files/neg/t6446-show-phases.check
@@ -1,36 +1,27 @@
     phase name  id  description
     ----------  --  -----------
         parser   1  parse source into ASTs, perform simple desugaring
-         namer   2  resolve names, attach symbols to named trees
-packageobjects   3  load package objects
-         typer   4  the meat and potatoes: type the trees
-        patmat   5  translate match expressions
-superaccessors   6  add super accessors in traits and nested classes
-    extmethods   7  add extension methods for inline classes
-       pickler   8  serialize symbol tables
-     refchecks   9  reference/override checking, translate nested objects
-       uncurry  10  uncurry, translate function values to anonymous classes
-     tailcalls  11  replace tail calls by jumps
-    specialize  12  @specialized-driven class and method specialization
- explicitouter  13  this refs to outer pointers, translate patterns
-       erasure  14  erase types, add interfaces for traits
-   posterasure  15  clean up erased inline classes
-      lazyvals  16  allocate bitmaps, translate lazy vals into lazified defs
-    lambdalift  17  move nested functions to top level
-  constructors  18  move field definitions into constructors
-       flatten  19  eliminate inner classes
-         mixin  20  mixin composition
-       cleanup  21  platform-specific cleanups, generate reflective calls
-         icode  22  generate portable intermediate code
-#partest !-optimise
-           jvm  23  generate JVM bytecode
-      terminal  24  the last phase during a compilation run
-#partest -optimise
-       inliner  23  optimization: do inlining
-inlinehandlers  24  optimization: inline exception handlers
-      closelim  25  optimization: eliminate uncalled closures
-      constopt  26  optimization: optimize null and other constants
-           dce  27  optimization: eliminate dead code
-           jvm  28  generate JVM bytecode
-      terminal  29  the last phase during a compilation run
-#partest
+ macroparadise   2  let our powers combine
+         namer   3  resolve names, attach symbols to named trees in paradise
+packageobjects   4  load package objects in paradise
+         typer   5  the meat and potatoes: type the trees in paradise
+        patmat   6  translate match expressions
+superaccessors   7  add super accessors in traits and nested classes
+    extmethods   8  add extension methods for inline classes
+       pickler   9  serialize symbol tables
+     refchecks  10  reference/override checking, translate nested objects
+       uncurry  11  uncurry, translate function values to anonymous classes
+     tailcalls  12  replace tail calls by jumps
+    specialize  13  @specialized-driven class and method specialization
+ explicitouter  14  this refs to outer pointers, translate patterns
+       erasure  15  erase types, add interfaces for traits
+   posterasure  16  clean up erased inline classes
+      lazyvals  17  allocate bitmaps, translate lazy vals into lazified defs
+    lambdalift  18  move nested functions to top level
+  constructors  19  move field definitions into constructors
+       flatten  20  eliminate inner classes
+         mixin  21  mixin composition
+       cleanup  22  platform-specific cleanups, generate reflective calls
+         icode  23  generate portable intermediate code
+           jvm  24  generate JVM bytecode
+      terminal  25  the last phase during a compilation run
diff --git a/test/files/neg/t6666.scala b/test/files/neg/t6666.scala
deleted file mode 100644
index 58c5be5405..0000000000
--- a/test/files/neg/t6666.scala
+++ /dev/null
@@ -1,121 +0,0 @@
-class C(a: Any)
-object F {
-  def byname(a: => Any) = println(a)
-  def hof(a: () => Any) = println(a())
-}
-
-class COkay extends C(0) {
-  def this(a: Any) {
-    this()
-    def x = "".toString
-    F.byname(x)
-  }
-}
-
-//
-// The thunk's apply method accesses the MODULE$
-// field before it is set.
-//
-//   0: getstatic #23; //Field O1$.MODULE$:LO1$;
-//   3: invokevirtual #26; //Method O1$.O1$$x$1:()Ljava/lang/String;
-object O1 extends C({
-  def x = "".toString
-  F.byname(x)
-})
-
-// java.lang.NullPointerException
-//   at O2$$anonfun$$init$$1.apply(<console>:11)
-object O2 extends C({
-  lazy val x = "".toString
-  F.byname(x)
-})
-
-// java.lang.NullPointerException
-//   at O3$$anonfun$$init$$1.apply(<console>:11)
-object O3 extends C({
-  def x = "".toString
-  F.hof(() => x)
-})
-
-// Okay, the nested classes don't get an outer pointer passed,
-// just an extra param for `x: String`.
-object O6 extends C({
-  val x = "".toString
-  F.byname(x); F.hof(() => x); (new { val xx = x }.xx)
-})
-
-
-class C1 extends C({
-  def x = "".toString
-  F.byname(x)
-})
-class C2 extends C({
-  lazy val x = "".toString
-  F.byname(x)
-})
-class C3 extends C({
-  def x = "".toString
-  F.hof(() => x)
-})
-class C4 extends C({
-  def x = "".toString
-  object Nested { def xx = x}
-  Nested.xx
-})
-
-// okay, for same reason as O6
-class C6 extends C({
-  val x = "".toString
-  F.byname(x); F.hof(() => x); (new { val xx = x }.xx)
-})
-
-class C11(a: Any) {
-  def this() = {
-    this({
-     def x = "".toString
-      F.byname(x)
-    })
-  }
-}
-
-// Crashes earlier in lazyVals.
-// class C12(a: Any) {
-//   def this() = {
-//     this({
-//       lazy val x = "".toString
-//       F.byname(x)
-//     })
-//   }
-// }
-
-class C13(a: Any) {
-  def this() = {
-    this({
-      def x = "".toString
-      F.hof(() => x)
-    })
-  }
-}
-
-class C14(a: Any) {
-  def this() = {
-    this({
-      def x = "".toString
-      object Nested { def xx = x}
-      Nested.xx
-    })
-  }
-}
-
-class COuter extends C({
-  def foo = 0
-  class CInner extends C({foo})
-})
-
-
-class CEarly(a: Any) extends {
-  val early = {def x = "".toString
-    object Nested { def xx = x}
-    Nested.xx
-  }
-} with AnyRef
\ No newline at end of file
diff --git a/test/files/neg/t7494-no-options.check b/test/files/neg/t7494-no-options.check
index 0bde84c96c..e5c6f6e95a 100644
--- a/test/files/neg/t7494-no-options.check
+++ b/test/files/neg/t7494-no-options.check
@@ -2,38 +2,28 @@ error: Error: ploogin takes no options
     phase name  id  description
     ----------  --  -----------
         parser   1  parse source into ASTs, perform simple desugaring
-         namer   2  resolve names, attach symbols to named trees
-packageobjects   3  load package objects
-         typer   4  the meat and potatoes: type the trees
-        patmat   5  translate match expressions
-superaccessors   6  add super accessors in traits and nested classes
-    extmethods   7  add extension methods for inline classes
-       pickler   8  serialize symbol tables
-     refchecks   9  reference/override checking, translate nested objects
-       uncurry  10  uncurry, translate function values to anonymous classes
-     tailcalls  11  replace tail calls by jumps
-    specialize  12  @specialized-driven class and method specialization
- explicitouter  13  this refs to outer pointers, translate patterns
-       erasure  14  erase types, add interfaces for traits
-   posterasure  15  clean up erased inline classes
-      lazyvals  16  allocate bitmaps, translate lazy vals into lazified defs
-    lambdalift  17  move nested functions to top level
-  constructors  18  move field definitions into constructors
-       flatten  19  eliminate inner classes
-         mixin  20  mixin composition
-       cleanup  21  platform-specific cleanups, generate reflective calls
-         icode  22  generate portable intermediate code
-#partest !-optimise
-           jvm  23  generate JVM bytecode
-       ploogin  24  A sample phase that does so many things it's kind of hard...
-      terminal  25  the last phase during a compilation run
-#partest -optimise
-       inliner  23  optimization: do inlining
-inlinehandlers  24  optimization: inline exception handlers
-      closelim  25  optimization: eliminate uncalled closures
-      constopt  26  optimization: optimize null and other constants
-           dce  27  optimization: eliminate dead code
-           jvm  28  generate JVM bytecode
-       ploogin  29  A sample phase that does so many things it's kind of hard...
-      terminal  30  the last phase during a compilation run
-#partest
+ macroparadise   2  let our powers combine
+         namer   3  resolve names, attach symbols to named trees in paradise
+packageobjects   4  load package objects in paradise
+         typer   5  the meat and potatoes: type the trees in paradise
+        patmat   6  translate match expressions
+superaccessors   7  add super accessors in traits and nested classes
+    extmethods   8  add extension methods for inline classes
+       pickler   9  serialize symbol tables
+     refchecks  10  reference/override checking, translate nested objects
+       uncurry  11  uncurry, translate function values to anonymous classes
+     tailcalls  12  replace tail calls by jumps
+    specialize  13  @specialized-driven class and method specialization
+ explicitouter  14  this refs to outer pointers, translate patterns
+       erasure  15  erase types, add interfaces for traits
+   posterasure  16  clean up erased inline classes
+      lazyvals  17  allocate bitmaps, translate lazy vals into lazified defs
+    lambdalift  18  move nested functions to top level
+  constructors  19  move field definitions into constructors
+       flatten  20  eliminate inner classes
+         mixin  21  mixin composition
+       cleanup  22  platform-specific cleanups, generate reflective calls
+         icode  23  generate portable intermediate code
+           jvm  24  generate JVM bytecode
+       ploogin  25  A sample phase that does so many things it's kind of hard...
+      terminal  26  the last phase during a compilation run
diff --git a/test/files/neg/t800.check b/test/files/neg/t800.check
index 8ba95fddde..37a0c6f324 100644
--- a/test/files/neg/t800.check
+++ b/test/files/neg/t800.check
@@ -5,8 +5,7 @@ t800.scala:8: error: method qualification is defined twice
   conflicting symbols both originated in file 't800.scala'
   val qualification = false;
       ^
-t800.scala:12: error: value qualification is defined twice
-  conflicting symbols both originated in file 't800.scala'
+t800.scala:12: error: qualification is already defined as value qualification
   var qualification = false;
       ^
 t800.scala:16: error: method qualification is defined twice
diff --git a/test/files/pos/t7426.scala b/test/files/pos/t7426.scala
deleted file mode 100644
index 8e42ad1812..0000000000
--- a/test/files/pos/t7426.scala
+++ /dev/null
@@ -1,3 +0,0 @@
-class foo(x: Any) extends annotation.StaticAnnotation
-
-@foo(new AnyRef { }) trait A
diff --git a/test/files/run/t6102.check b/test/files/run/t6102.check
index 4e8efa7b6d..46e9e1c521 100644
--- a/test/files/run/t6102.check
+++ b/test/files/run/t6102.check
@@ -1,4 +1,5 @@
 [running phase parser on t6102.scala]
+[running phase macroparadise on t6102.scala]
 [running phase namer on t6102.scala]
 [running phase packageobjects on t6102.scala]
 [running phase typer on t6102.scala]
@@ -20,12 +21,6 @@
 [running phase mixin on t6102.scala]
 [running phase cleanup on t6102.scala]
 [running phase icode on t6102.scala]
-#partest -optimise
-[running phase inliner on t6102.scala]
-[running phase inlinehandlers on t6102.scala]
-[running phase closelim on t6102.scala]
-[running phase constopt on t6102.scala]
-#partest
 [running phase dce on t6102.scala]
 [running phase jvm on icode]
 hello
diff --git a/test/files/run/t6259.scala b/test/files/run/t6259.scala
deleted file mode 100644
index b2c27df51f..0000000000
--- a/test/files/run/t6259.scala
+++ /dev/null
@@ -1,56 +0,0 @@
-import scala.reflect.runtime.universe._
-
-class A[X](implicit val tt: TypeTag[X]) {}
-object B extends A[String]
-
-object C {
-  object D extends A[String]
-}
-
-trait E {
-  object F extends A[String]
-}
-
-class G {
-  object H extends A[String]
-}
-
-object HasX {
-  val x = {
-    object InVal extends A[String]
-    InVal
-    5
-  }
-
-}
-
-trait NeedsEarly {
- val x: AnyRef
-}
-
-object Early extends {
-  // Drops to this.getClass and is not ok...
-  val x = { object EarlyOk extends A[String]; EarlyOk }
-} with NeedsEarly
-
-
-class DoubleTrouble[X](x: AnyRef)(implicit override val tt: TypeTag[X]) extends A[X]
-
-object DoubleOk extends DoubleTrouble[String]({
-  // Drops to this.getClass and is an issue
-  object InnerTrouble extends A[String];
-  InnerTrouble
-})
-
-object Test extends App {
-  B
-  C.D
-  val e = new E {}; e.F
-  val g = new G; g.H
-
-  locally(HasX.x)
-  // locally(Early.x) TODO sort out VerifyError in Early$.<init>
-  // DoubleOk         TODO sort out VerifyError in DoubleOk$.<init>
-}
-
-
diff --git a/test/files/scalap/typeAnnotations.check b/test/files/scalap/typeAnnotations.check
index cba69f8e41..d72817a725 100644
--- a/test/files/scalap/typeAnnotations.check
+++ b/test/files/scalap/typeAnnotations.check
@@ -1,8 +1,8 @@
 abstract class TypeAnnotations[@scala.specialized R] extends scala.AnyRef {
   def this() = { /* compiled code */ }
   @scala.specialized
-  val x: scala.Int = { /* compiled code */ }
   @scala.specialized
   type T
   def compose[@scala.specialized A](x: A, y: R): A = { /* compiled code */ }
+  val x: scala.Int = { /* compiled code */ }
 }
-- 
1.8.1.4

